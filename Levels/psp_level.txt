import struct
import bpy
import bmesh

file = open("/Users/???/Desktop/sc.psp_level","rb")

#Read Header Data
header_size = 64
bytes_filetype_mark = file.read(4)
bytes_lvlobj_count = file.read(4)#Count for lvl objs, each mini-chunk in the main chunk is 64 bytes, and there is one mini-chunk for every lvl obj in the level
bytes_tex_length = file.read(4)#Length for the textures chunk
bytes_bboxes_count = file.read(4)#Length for the bboxes chunk
bytes_vert_length = file.read(4)#Length for the vertices chunk
bytes_lvlobj_length = file.read(4)#Length for lvl objs chunk
bytes_unknown1_length = file.read(4)#Length or Count for unknown data chunk
bytes_unknown2_length = file.read(4)#Length or Count for unknown data chunk
bytes_texcmds_length = file.read(4)#Length for something refered to in the boot bin as texcmds, not sure what this is yet
bytes_prims_length = file.read(4)#Length for something refered to in the boot bin as prims, not sure what this is yet
bytes_unknown3_length = file.read(4)#Length or Count for unknown data chunk
bytes_lvloffset_length = file.read(6)#3 shorts for level offset
  
#Convert header data into useable length values  
lvlobj_count_int = int.from_bytes(bytes_lvlobj_count, "little")  
tex_length_int = int.from_bytes(bytes_tex_length, "little")      
bboxes_count_int = int.from_bytes(bytes_bboxes_count, "little") 
vert_length_int = int.from_bytes(bytes_vert_length, "little")   
unknown1_length_int = int.from_bytes(bytes_unknown1_length , "little") 
unknown2_length_int = int.from_bytes(bytes_unknown2_length , "little")   
lvlobj_length_int = int.from_bytes(bytes_lvlobj_length, "little")  
texcmds_length_int = int.from_bytes(bytes_texcmds_length, "little")  
prims_length_int = int.from_bytes(bytes_prims_length, "little")  
unknown3_length_int = int.from_bytes(bytes_unknown3_length , "little") 
lvl_offset = struct.unpack('3h', bytes_lvloffset_length)

#Calculate offset values based off chunk lengths
lvlobj_count_offset = header_size 
tex_offset = header_size + (lvlobj_count_int * 64)
bboxes_offset = tex_offset + tex_length_int
vert_offset = bboxes_offset + (bboxes_count_int * 16)
lvlobj_offset = vert_offset + vert_length_int
unknown1_offset = lvlobj_offset + lvlobj_length_int
unknown2_offset = unknown1_offset + unknown1_length_int
texcmds_offset = unknown1_offset + unknown1_length_int
prims_offset = texcmds_offset + texcmds_length_int
unknown3_offset = prims_offset + prims_length_int

#Create lists
bboxes_l = list(range(0))
verts_l = list(range(0))
faces_l = list(range(0))

#Force the fileseek to bbox offset since texture data chunk handeling isn't figured out yet
file.seek(bboxes_offset)

#Read BBoxes data
i = 0
while(i < bboxes_count_int):
  bytes_bbox = file.read(8)
  bbox_unpack = struct.unpack('4h', bytes_bbox)
  bytes_bbox_ = file.read(8)
  bbox__unpack = struct.unpack('4h', bytes_bbox_)
  bboxes_index = (bbox_unpack, bbox__unpack)
  bboxes_l.insert(0, bboxes_index)
  i += 1

#Read Vertices data
i = 0
while(i < vert_length_int / 12.0):
  bytes_uvx = file.read(2)
  bytes_uvy = file.read(2)
  bytes_vertcol = file.read(2)#Some vertices have 6 byte vertex colors, this is why most levels don't fully import proper aside from school 1 and the test levels, I don't know how the game detects these yet but hopefully I can figure it out soon
  bytes_vertpos = file.read(6)
  vertpos_unpack = struct.unpack('3h', bytes_vertpos)
  verts_index = (vertpos_unpack)
  verts_l.insert(0, verts_index)
  i += 1

verts = verts_l
faces = []

#Create new object within blender
mymesh = bpy.data.meshes.new("PSP_Level_Test")
myobject = bpy.data.objects.new("PSP_Level_Test", mymesh)

#Move object to offset value from header
myobject.location = (lvl_offset)
bpy.context.scene.objects.link(myobject)

mymesh.from_pydata(verts,[],faces)
mymesh.update(calc_edges=True)

#print("BBoxes Values")
#print(bboxes_l)

#print("Vertices Values")
#print(verts_l)

file.close()

----------------------------------------------------------------
NOTE: Only the following levels seem to import complete, School, Marseille, Shaba Test Level, & Page44 Test Level.
----------------------------------------------------------------

- File Study -

  All byte values are little endian unless otherwise stated!

  Header [64 Bytes Total]

    Num. Of   | Quick Desc.               | Misc. Details
     Bytes    |

    4 Bytes   | File format mark          | [0B000000]
    4 Bytes   | Level objects chunk count | Each chunk is 64 bytes long. Count * 64 gets the chunk length.
    4 Bytes   | Texture chunk length      |
    4 Bytes   | BBoxes count              | Each Bboxes length is 16 bytes. Count * 16 gets the chunk length.
    4 Bytes   | Vertices chunk length     |
    4 Bytes   | Unknown                   |
    4 Bytes   | Unknown                   |
    4 Bytes   | Unknown                   |
    4 Bytes   | Unknown                   | Refered to as Texcmds in boot bin, possibly texture comands.
    4 Bytes   | Unknown                   | Refered to as Prims in boot bin.
    4 Bytes   | Unknown                   |
    6 Bytes   | Level offset position     | Vector3
    2 Bytes   | Null                      | [FF]
    8 Bytes   | Unknown                   |

  Level Object Data Chunk [Total Determined by Header]
    Num. Of   | Quick Desc.               | Misc. Details
     Bytes    |

    12 Bytes  | Unknown                   | Seems to always be the same [000000000000484200000000]
	4 Bytes   | Unknown                   |
  
  Textures Data Chunk [Total Determined by Header]
	
	
  
  BBoxes Data Chunk [Total Determined by Header]
 
    Num. Of   | Quick Desc.               | Misc. Details
     Bytes    |

    8 Bytes   | Vector4                   |
    8 Bytes   | Vector4                   |

  Vertices Data Chunk [Total Determined by Header]
 
    Num. Of   | Quick Desc.               | Misc. Details
     Bytes    |

    2 Bytes   | X UV position             |
    2 Bytes   | Y UV position             |
    2/6 Bytes | Vertex color              |
    2 Bytes   | X position                |
    2 Bytes   | Y position                |
    2 Bytes   | Z position                |
	
  Materials Data Chunk [Total Determined by Header]
    The following are random documentation of flags and their related bytes, material chunks change based on data for each material, as a previous set flag will effect following materials
    Num. Of   | Quick Desc.               | Misc. Details
     Bytes    |
	
	4 Bytes   | Alpha cutoff              | [0000FFDB] First two bytes seem to determine the actual value
	4 Bytes   | Backface Culling Flag     | [0100001D] = BFC Enabled [0000001D] = BFC Disabled
	4 Bytes   | Blend mode                | [320000DF] First byte = if fixed, dst, src, etc. Second byte = Additive, subtractive, reverse subtract, etc. Third byte unknown. Fourth byte pass I think.
	4 Bytes   | CLUT Mode                 | [040000C3] = CLUT4 [050000C3] = CLUT8 [060000C3] = CLUT16
	4 Bytes   | LOD 0 Pointer             | [000000A0]
	4 Bytes   | LOD 1 Pointer             | [000000A1]
	4 Bytes   | LOD 2 Pointer             | [000000A2]
	4 Bytes   | LOD 3 Pointer             | [000000A3]
	4 Bytes   | LOD 0 Size                | [050300B8] = 32 x 8
	4 Bytes   | LOD 1 Size                | [040200B9] = 16 x 4
	4 Bytes   | LOD 2 Size                | [030100BA] = 8 x 2
	4 Bytes   | LOD 3 Size                | [020000BB] = 4 x 1
	4 Bytes   | LOD Slope                 | [182B41D0] = 10.693359
	4 Bytes   | Tex Filtering             | [070100C6] = min linear mip linear mag linear
	4 Bytes   | Tex U Scale               | [00004148] = 8
	4 Bytes   | Tex V Scale               | [00004149] = 8
	4 Bytes   | Tex U Offset              | [0000C14A] = -8
	4 Bytes   | Tex V Offset              | [0000C14B] = -8
	4 Bytes   | Tex Wrap Mode             | [010100C7] = clamp s clamp t [000000C7] = wrap s wrap t 
	4 Bytes   | Transparency Flag         | [01000021] = Transparency Enabled [00000021] = Transparency Disabled
	4 Bytes   | Swizzle Flag/LOD Levels   | [010003C2] = Swizzled + 3 LOD Levels [000002C2] = Not Swizzled + 2 LOD Levels
	4 Bytes   | Z-bias                    | [00004647] First two bytes seem to determine the actual value
