Skin/MDL Files

Header Data
    12 Bytes model format mark? (These bytes [BE BA ED C0 00 00 00 00 60 00 00 00] seem to always be the same on every model, so I think it might be to mark them as a skin/mdl model)
    4 Bytes checksum name
    4 Bytes padding
    2 Bytes textures data start offset
    2 Bytes padding
    2 Bytes textures data chunk length
    6 Bytes padding
    2 Bytes vertices data start offset
    2 Bytes padding
    2 Bytes vertices data chunk length
    6 Bytes padding
    2 Bytes face data start offset
    2 Bytes padding
    2 Bytes face data chunk length
    6 Bytes padding
    2 Bytes ???
    6 Bytes padding
    X Bytes model file name as string (Not sure why this is part of the models, seems to do nothing, maybe was for something dev side, does make searching the models in un-compressed containers easier though :P)
    
    Note: It is possible some of the padding could be for larger offset/length values, but I have yet to run into any models that use them so I am not 100% sure
    
Materials Data

Textures Data

64/128/256 bytes for texture color pal (64 bytes for 16 colors, 128 for 64 colors (weird fucky 2 byte rgba format), 256 for 64 colors)
x bytes for textures, usually goes smallest mip map up to the biggest texture size

^ loops till end of the textures chunk

Face Data

    Vertex Groups

    The bytes for a groups number are stored in two bytes, following a pattern of
    00 00
    00 04
    00 08
    00 0C
    and then the first byte goes up by one after that loop, so it would be 
    0 = 00 00
    1 = 00 04
    2 = 00 08
    3 = 00 0C
    4 = 01 00
    5 = 01 04
    6 = 01 08
    7 = 01 0C
    and so on
    
    They usually come after either byte 2A or 0A, and are usually in little clusters, with 2A being the start and 9B being the end

Vertices Data

5 bytes (FF 00 00 00 0B) start of vertices mark?
4 bytes ???
6 bytes ???
2 bytes x pos
2 bytes y pos
2 bytes z pos

^ loops till end of the vertices chunk
